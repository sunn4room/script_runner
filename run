#!/bin/sh

# logging
log_file() {
    printf '[%s] %s %s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$@" >> /tmp/run_log
}

log_console() {
    if [ "$1" = "DEBUG" ]; then
        printf '\033[1;35m[%s] \033[1;34m%s \033[0m%s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$@"
    elif [ "$1" = " INFO" ]; then
        printf '\033[1;35m[%s] \033[1;32m%s \033[0m%s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$@"
    elif [ "$1" = " WARN" ]; then
        printf '\033[1;35m[%s] \033[1;33m%s \033[0m%s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$@"
    elif [ "$1" = "ERROR" ]; then
        printf '\033[1;35m[%s] \033[1;31m%s \033[0m%s\n' "$(date '+%Y-%m-%d %H:%M:%S')" "$@"
    fi
}

debug() {
    [ "${RUN_LOG_LEVEL}" -le 1 ] && log_console "DEBUG" "$*"
    log_file "DEBUG" "$*"
}

info() {
    [ "${RUN_LOG_LEVEL}" -le 2 ] && log_console " INFO" "$*"
    log_file " INFO" "$*"
}

warn() {
    [ "${RUN_LOG_LEVEL}" -le 3 ] && log_console " WARN" "$*"
    log_file " WARN" "$*"
}

error() {
    [ "${RUN_LOG_LEVEL}" -le 4 ] && log_console "ERROR" "$*" >&2
    log_file "ERROR" "$*"
    exit 1
}

get_content() {
    if expr "${BASE}" : "https://" >/dev/null 2>&1; then
        if command -v curl >/dev/null 2>&1; then
            curl -fsSL "${BASE}/$1" 2>/dev/null
        else
            wget -qO- "${BASE}/$1" 2>/dev/null
        fi
    else
        cat "${BASE}/$1" 2>/dev/null
    fi
}

run_hook() {
    if ! get_content "$1.$2" | while read -r line; do
        line=`eval echo "${line}"`
        if [ -z "${line}" ] || expr "${line}" : "#" >/dev/null 2>&1; then
            continue
        fi
        eval "run ${line}"
    done; then
        exit 1
    fi
}

run_script() {
    script="$1"
    shift
    if ! get_content "${script}" > /tmp/run_script; then
        return 1
    fi
    chmod u+x /tmp/run_script
    if expr "$(basename "${script}")" : "sudo-" >/dev/null 2>&1 && [ "$(id -u)" -ne 0 ]; then
        # shellcheck disable=SC2024
        sudo /tmp/run_script "$@" </dev/tty
    else
        /tmp/run_script "$@" </dev/tty
    fi
}

run() {
    # quick return
    if [ "$#" -eq 0 ] || [ -z "$1" ]; then
        warn "argument is empty"
		return 0
    fi

    # check finished
    if echo "${FINISHED}" | sed 's/:/\n/g' | grep '^'"$*"'$' >/dev/null 2>&1; then
        debug "skip command: $*"
        return 0
    fi

    # check running
    if echo "${RUNNING}" | sed 's/:/\n/g' | grep '^'"$*"'$' >/dev/null 2>&1; then
        error "cannot run command twice: $*"
    fi
    RUNNING="${RUNNING}$*:"
    debug "run command: $*"

    # run pre hook
    debug "run pre hook for: $*"
    run_hook "$1" pre

    # run script itself
    info "$*"
    run_script "$@" || error "return $?"

    # run post hook
    debug "run post hook for: $*"
    run_hook "$1" post

    # finished
    FINISHED="${FINISHED}$*:"
    debug "command finished: $*"

    return 0
}

# main
[ -z "${RUN_LOG_LEVEL}" ] && RUN_LOG_LEVEL=2
RUNNING=""
FINISHED=""
RAWSITE="https://github.com/sunn4room/script_runner/raw/main"
if [ "$0" = "-" ]; then
    export BASE="${RAWSITE}"
else
    export BASE="$(dirname "$(readlink -f "$0")")"
fi

log_file " LINE" "----------------------------------------"
run "$@"
