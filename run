#!/bin/sh

_init() {
	TEMP_DIR="/tmp/script_runner"
	test -d "${TEMP_DIR}" || mkdir "${TEMP_DIR}"
	LOG_FILE="${TEMP_DIR}/log"
	SCRIPT_FILE="${TEMP_DIR}/script"
	test -f "${SCRIPT_FILE}" || {
		touch "${SCRIPT_FILE}"
		chmod u+x "${SCRIPT_FILE}"
	}
	CACHE_DIR="${TEMP_DIR}/cache"
	test -d "${CACHE_DIR}" && rm -rf "${CACHE_DIR}"
	mkdir "${CACHE_DIR}"
	EXECUTE_FILE="${TEMP_DIR}/execute"
	test -f "${EXECUTE_FILE}" && rm "${EXECUTE_FILE}"
	touch "${EXECUTE_FILE}"
	FINISHED_FILE="${TEMP_DIR}/finished"
	test -f "${FINISHED_FILE}" && rm "${FINISHED_FILE}"
	touch "${FINISHED_FILE}"
	if test "$0" = "-"; then
		export BASE="https://github.com/sunn4room/script_runner/raw/main"
	else
		export BASE="$(dirname "$(readlink -f "$0")")"
	fi
	test -z "${RUN_LOG_LEVEL}" && RUN_LOG_LEVEL=2
}

_date() {
	date '+%Y-%m-%d %H:%M:%S'
}

_log_file() {
	printf '[%s] %s %s\n' "$(_date)" "$@" >> "${LOG_FILE}"
}

_log_console() {
	if test "$1" = "DEBUG"; then
		printf '\033[1;35m[%s] \033[1;34m%s \033[0m%s\n' "$(_date)" "$@"
	elif test "$1" = " INFO"; then
		printf '\033[1;35m[%s] \033[1;32m%s \033[0m%s\n' "$(_date)" "$@"
	elif test "$1" = " WARN"; then
		printf '\033[1;35m[%s] \033[1;33m%s \033[0m%s\n' "$(_date)" "$@"
	elif test "$1" = "ERROR"; then
		printf '\033[1;35m[%s] \033[1;31m%s \033[0m%s\n' "$(_date)" "$@"
	fi
}

_debug() {
	test "${RUN_LOG_LEVEL}" -le 1 && _log_console "DEBUG" "$*"
	_log_file "DEBUG" "$*"
}

_info() {
	test "${RUN_LOG_LEVEL}" -le 2 && _log_console " INFO" "$*"
	_log_file " INFO" "$*"
}

_warn() {
	test "${RUN_LOG_LEVEL}" -le 3 && _log_console " WARN" "$*"
	_log_file " WARN" "$*"
}

_error() {
	test "${RUN_LOG_LEVEL}" -le 4 && _log_console "ERROR" "$*" >&2
	_log_file "ERROR" "$*"
	exit 1
}

_read() {
	script="${CACHE_DIR}/$1"
	if ! test -f "${script}"; then
		script_dir="$(dirname "${script}")"
		test -d "${script_dir}" \
			|| mkdir -p "${script_dir}" \
			|| _error "script path illegal: $1"
		if test "$0" = "-"; then
			if command -v curl >/dev/null 2>&1; then
				curl -fsSL "${BASE}/$1" 2>/dev/null >"${script}"
			elif command -v wget >/dev/null 2>&1; then
				wget -qO- "${BASE}/$1" 2>/dev/null >"${script}"
			else
				false
			fi || _error "cannot download script: $1"
		else
			cat "${BASE}/$1" 2>/dev/null >"${script}" \
				|| _error "cannot find script: $1"
		fi
		_debug "cache script: $1"
	fi
	cat "${script}"
}

_run_pre_hook() {
	_read "$1" | sed -n '/^#<.*/p' | while read -r line; do
		eval "_run $(printf '%s' "${line}" | cut -c 3-)"
	done || exit 1
}

_run_post_hook() {
	_read "$1" | sed -n '/^#>.*/p' | while read -r line; do
		eval "_run $(printf '%s' "${line}" | cut -c 3-)"
	done || exit 1
}

_run_script() {
	_read "$1" | sed '/^#[<>].*/d' >"${SCRIPT_FILE}"
	_info "$*"
	if expr "$(basename "$1")" : "sudo-" >/dev/null 2>&1 && test "$(id -u)" -ne 0; then
		shift
		sudo "${SCRIPT_FILE}" "$@" </dev/tty || _error "return $?"
	else
		shift
		"${SCRIPT_FILE}" "$@" </dev/tty || _error "return $?"
	fi
}

_run() {
	grep '^'"$*"'$' "${FINISHED_FILE}" >/dev/null 2>&1 && {
		_debug "skip: $*"
		return
	}
	grep '^'"$*"'$' "${EXECUTE_FILE}" >/dev/null 2>&1 && \
		_error "occur circular reference: $*"
	printf '%s\n' "$*" >> "${EXECUTE_FILE}"
	_debug "start: $*"
	_run_pre_hook "$1"
	_run_script "$@"
	_run_post_hook "$1"
	printf '%s\n' "$*" >> "${FINISHED_FILE}"
	_debug "end: $*"
}

_main() {
	_init
	_log_file " LINE" "----------------------------------------"
	test "$#" -eq 0 && _error "one or more arguments are required"
	_run "$@"
}

_main "$@"
